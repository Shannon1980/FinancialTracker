name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff .
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .
    
    - name: Type checking with mypy
      run: |
        mypy . --ignore-missing-imports
    
    - name: Security scan with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt
    
    - name: Run tests with pytest
      run: |
        pytest tests/ --cov=. --cov-report=xml --cov-report=html --junitxml=pytest-report.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety
    
    - name: Check for security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test Streamlit app startup
      run: |
        timeout 30s streamlit run seas-financial-tracker.py --server.headless true --server.port 8501 || true
    
    - name: Create deployment artifact
      run: |
        tar -czf seas-financial-tracker.tar.gz \
          seas-financial-tracker.py \
          auth.py \
          user_management.py \
          theme_manager.py \
          chart_utils.py \
          data_utils.py \
          styling.py \
          utils/ \
          static/ \
          requirements.txt \
          .streamlit/
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: seas-financial-tracker-build
        path: seas-financial-tracker.tar.gz

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to Streamlit Cloud
      run: |
        echo "ðŸš€ Deployment to Streamlit Cloud is ready!"
        echo "ðŸ“‹ Manual deployment steps:"
        echo "1. Go to https://share.streamlit.io"
        echo "2. Sign in with GitHub"
        echo "3. Click 'New app'"
        echo "4. Repository: Shannon1980/FinancialTracker"
        echo "5. Main file: seas-financial-tracker.py"
        echo "6. Set secrets in app settings"
        echo "7. Deploy!"
        echo ""
        echo "ðŸ”‘ Remember to set these secrets:"
        echo "- AUTH_SALT"
        echo "- ADMIN_PASSWORD"
        echo "- MANAGER_PASSWORD"
        echo "- VIEWER_PASSWORD"